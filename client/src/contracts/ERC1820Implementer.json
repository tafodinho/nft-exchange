{
  "contractName": "ERC1820Implementer",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "interfaceHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "canImplementInterfaceForAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"interfaceHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"canImplementInterfaceForAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC1820Implementer} interface. Contracts may inherit from this and call {_registerInterfaceForAddress} to declare their willingness to be implementers. {IERC1820Registry-setInterfaceImplementer} should then be called for the registration to be complete.\",\"kind\":\"dev\",\"methods\":{\"canImplementInterfaceForAddress(bytes32,address)\":{\"details\":\"See {IERC1820Implementer-canImplementInterfaceForAddress}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol\":\"ERC1820Implementer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol\":{\"keccak256\":\"0xb9984c03b2de05701f0e3610d783651a4552b4e0a453a3440894546ec2d188d4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d292900a14891fe5a344315a4b912801265ff65a3ed9a916db5c1c004c20a59b\",\"dweb:/ipfs/QmRMAF1EXrpk2ic1FcY9xSxyPB6j1EGCwCT4QX6uHqxvpU\"]},\"project:/contracts/openzeppelin-solidity/contracts/utils/introspection/IERC1820Implementer.sol\":{\"keccak256\":\"0xc94f9b84096deaf9d2ba5681db62455e3f2d5f0a61341f68a6f576f32a6e60be\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://74465bbd80d2e8cfb900bf00c69940822d59bfee20d3a9725fbd74e26413319b\",\"dweb:/ipfs/QmYLEg43ZBYBsjx6qDiHK21P4YjVYLzQcUMhadrdqmA5ZL\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610114806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640b5035878e67f6bea06aedf5b0241338fb32803ecdf35863e396bc6a8e996164736f6c634300080e0033",
  "deployedBytecode": "0x6080604052348015600f57600080fd5b506004361060285760003560e01c8063249cb3fa14602d575b600080fd5b603c603836600460a4565b604e565b60405190815260200160405180910390f35b6000828152602081815260408083206001600160a01b038516845290915281205460ff16607b576000609d565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b6000806040838503121560b657600080fd5b8235915060208301356001600160a01b038116811460d357600080fd5b80915050925092905056fea2646970667358221220640b5035878e67f6bea06aedf5b0241338fb32803ecdf35863e396bc6a8e996164736f6c634300080e0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:552:176",
        "statements": [
          {
            "nodeType": "YulBlock",
            "src": "6:3:176",
            "statements": []
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "101:267:176",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "147:16:176",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "156:1:176",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "159:1:176",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "149:6:176"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "149:12:176"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "149:12:176"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "122:7:176"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "131:9:176"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "118:3:176"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "118:23:176"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "143:2:176",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "114:3:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "114:32:176"
                  },
                  "nodeType": "YulIf",
                  "src": "111:52:176"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "172:33:176",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "195:9:176"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "182:12:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "182:23:176"
                  },
                  "variableNames": [
                    {
                      "name": "value0",
                      "nodeType": "YulIdentifier",
                      "src": "172:6:176"
                    }
                  ]
                },
                {
                  "nodeType": "YulVariableDeclaration",
                  "src": "214:45:176",
                  "value": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "244:9:176"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "255:2:176",
                            "type": "",
                            "value": "32"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "240:3:176"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "240:18:176"
                      }
                    ],
                    "functionName": {
                      "name": "calldataload",
                      "nodeType": "YulIdentifier",
                      "src": "227:12:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "227:32:176"
                  },
                  "variables": [
                    {
                      "name": "value",
                      "nodeType": "YulTypedName",
                      "src": "218:5:176",
                      "type": ""
                    }
                  ]
                },
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "322:16:176",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "331:1:176",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "334:1:176",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "324:6:176"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "324:12:176"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "324:12:176"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "281:5:176"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "292:5:176"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "307:3:176",
                                        "type": "",
                                        "value": "160"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "312:1:176",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "303:3:176"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "303:11:176"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "316:1:176",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "299:3:176"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "299:19:176"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "288:3:176"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "288:31:176"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "278:2:176"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "278:42:176"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "271:6:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "271:50:176"
                  },
                  "nodeType": "YulIf",
                  "src": "268:70:176"
                },
                {
                  "nodeType": "YulAssignment",
                  "src": "347:15:176",
                  "value": {
                    "name": "value",
                    "nodeType": "YulIdentifier",
                    "src": "357:5:176"
                  },
                  "variableNames": [
                    {
                      "name": "value1",
                      "nodeType": "YulIdentifier",
                      "src": "347:6:176"
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_bytes32t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "59:9:176",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "70:7:176",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "82:6:176",
                "type": ""
              },
              {
                "name": "value1",
                "nodeType": "YulTypedName",
                "src": "90:6:176",
                "type": ""
              }
            ],
            "src": "14:354:176"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "474:76:176",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "484:26:176",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "496:9:176"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "507:2:176",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "492:3:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "492:18:176"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "484:4:176"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "526:9:176"
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "537:6:176"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "519:6:176"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "519:25:176"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "519:25:176"
                }
              ]
            },
            "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "443:9:176",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "454:6:176",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "465:4:176",
                "type": ""
              }
            ],
            "src": "373:177:176"
          }
        ]
      },
      "contents": "{\n    { }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
      "id": 176,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "482:993:153:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "482:993:153:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;795:280;;;;;;:::i;:::-;;:::i;:::-;;;519:25:176;;;507:2;492:18;795:280:153;;;;;;;;954:7;984:35;;;;;;;;;;;-1:-1:-1;;;;;984:44:153;;;;;;;;;;;;:84;;1063:4;984:84;;;588:33;984:84;977:91;795:280;-1:-1:-1;;;795:280:153:o;14:354:176:-;82:6;90;143:2;131:9;122:7;118:23;114:32;111:52;;;159:1;156;149:12;111:52;182:23;;;-1:-1:-1;255:2:176;240:18;;227:32;-1:-1:-1;;;;;288:31:176;;278:42;;268:70;;334:1;331;324:12;268:70;357:5;347:15;;;14:354;;;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC1820Implementer.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1820Implementer.sol\";\n\n/**\n * @dev Implementation of the {IERC1820Implementer} interface.\n *\n * Contracts may inherit from this and call {_registerInterfaceForAddress} to\n * declare their willingness to be implementers.\n * {IERC1820Registry-setInterfaceImplementer} should then be called for the\n * registration to be complete.\n */\ncontract ERC1820Implementer is IERC1820Implementer {\n    bytes32 private constant _ERC1820_ACCEPT_MAGIC = keccak256(\"ERC1820_ACCEPT_MAGIC\");\n\n    mapping(bytes32 => mapping(address => bool)) private _supportedInterfaces;\n\n    /**\n     * @dev See {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function canImplementInterfaceForAddress(bytes32 interfaceHash, address account)\n        public\n        view\n        virtual\n        override\n        returns (bytes32)\n    {\n        return _supportedInterfaces[interfaceHash][account] ? _ERC1820_ACCEPT_MAGIC : bytes32(0x00);\n    }\n\n    /**\n     * @dev Declares the contract as willing to be an implementer of\n     * `interfaceHash` for `account`.\n     *\n     * See {IERC1820Registry-setInterfaceImplementer} and\n     * {IERC1820Registry-interfaceHash}.\n     */\n    function _registerInterfaceForAddress(bytes32 interfaceHash, address account) internal virtual {\n        _supportedInterfaces[interfaceHash][account] = true;\n    }\n}\n",
  "sourcePath": "/Users/macbookpro/Projects/NFT/NFTExchange/contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol",
  "ast": {
    "absolutePath": "project:/contracts/openzeppelin-solidity/contracts/utils/introspection/ERC1820Implementer.sol",
    "exportedSymbols": {
      "ERC1820Implementer": [
        21003
      ],
      "IERC1820Implementer": [
        21029
      ]
    },
    "id": 21004,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 20946,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "111:23:153"
      },
      {
        "absolutePath": "project:/contracts/openzeppelin-solidity/contracts/utils/introspection/IERC1820Implementer.sol",
        "file": "./IERC1820Implementer.sol",
        "id": 20947,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 21004,
        "sourceUnit": 21030,
        "src": "136:35:153",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 20949,
              "name": "IERC1820Implementer",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 21029,
              "src": "513:19:153"
            },
            "id": 20950,
            "nodeType": "InheritanceSpecifier",
            "src": "513:19:153"
          }
        ],
        "canonicalName": "ERC1820Implementer",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 20948,
          "nodeType": "StructuredDocumentation",
          "src": "173:308:153",
          "text": " @dev Implementation of the {IERC1820Implementer} interface.\n Contracts may inherit from this and call {_registerInterfaceForAddress} to\n declare their willingness to be implementers.\n {IERC1820Registry-setInterfaceImplementer} should then be called for the\n registration to be complete."
        },
        "fullyImplemented": true,
        "id": 21003,
        "linearizedBaseContracts": [
          21003,
          21029
        ],
        "name": "ERC1820Implementer",
        "nameLocation": "491:18:153",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "id": 20955,
            "mutability": "constant",
            "name": "_ERC1820_ACCEPT_MAGIC",
            "nameLocation": "564:21:153",
            "nodeType": "VariableDeclaration",
            "scope": 21003,
            "src": "539:82:153",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 20951,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "539:7:153",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "455243313832305f4143434550545f4d41474943",
                  "id": 20953,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "598:22:153",
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_a2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4",
                    "typeString": "literal_string \"ERC1820_ACCEPT_MAGIC\""
                  },
                  "value": "ERC1820_ACCEPT_MAGIC"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_stringliteral_a2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b4",
                    "typeString": "literal_string \"ERC1820_ACCEPT_MAGIC\""
                  }
                ],
                "id": 20952,
                "name": "keccak256",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 4294967288,
                "src": "588:9:153",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                  "typeString": "function (bytes memory) pure returns (bytes32)"
                }
              },
              "id": 20954,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "588:33:153",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 20961,
            "mutability": "mutable",
            "name": "_supportedInterfaces",
            "nameLocation": "681:20:153",
            "nodeType": "VariableDeclaration",
            "scope": 21003,
            "src": "628:73:153",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
              "typeString": "mapping(bytes32 => mapping(address => bool))"
            },
            "typeName": {
              "id": 20960,
              "keyType": {
                "id": 20956,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "636:7:153",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "628:44:153",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                "typeString": "mapping(bytes32 => mapping(address => bool))"
              },
              "valueType": {
                "id": 20959,
                "keyType": {
                  "id": 20957,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "655:7:153",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "nodeType": "Mapping",
                "src": "647:24:153",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "valueType": {
                  "id": 20958,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "666:4:153",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                }
              }
            },
            "visibility": "private"
          },
          {
            "baseFunctions": [
              21028
            ],
            "body": {
              "id": 20984,
              "nodeType": "Block",
              "src": "967:108:153",
              "statements": [
                {
                  "expression": {
                    "condition": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 20972,
                          "name": "_supportedInterfaces",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20961,
                          "src": "984:20:153",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                            "typeString": "mapping(bytes32 => mapping(address => bool))"
                          }
                        },
                        "id": 20974,
                        "indexExpression": {
                          "id": 20973,
                          "name": "interfaceHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20964,
                          "src": "1005:13:153",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "984:35:153",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 20976,
                      "indexExpression": {
                        "id": 20975,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20966,
                        "src": "1020:7:153",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "984:44:153",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "arguments": [
                        {
                          "hexValue": "30783030",
                          "id": 20980,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1063:4:153",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0x00"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 20979,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1055:7:153",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_bytes32_$",
                          "typeString": "type(bytes32)"
                        },
                        "typeName": {
                          "id": 20978,
                          "name": "bytes32",
                          "nodeType": "ElementaryTypeName",
                          "src": "1055:7:153",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 20981,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1055:13:153",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 20982,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "984:84:153",
                    "trueExpression": {
                      "id": 20977,
                      "name": "_ERC1820_ACCEPT_MAGIC",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20955,
                      "src": "1031:21:153",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 20971,
                  "id": 20983,
                  "nodeType": "Return",
                  "src": "977:91:153"
                }
              ]
            },
            "documentation": {
              "id": 20962,
              "nodeType": "StructuredDocumentation",
              "src": "708:82:153",
              "text": " @dev See {IERC1820Implementer-canImplementInterfaceForAddress}."
            },
            "functionSelector": "249cb3fa",
            "id": 20985,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "canImplementInterfaceForAddress",
            "nameLocation": "804:31:153",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 20968,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "928:8:153"
            },
            "parameters": {
              "id": 20967,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20964,
                  "mutability": "mutable",
                  "name": "interfaceHash",
                  "nameLocation": "844:13:153",
                  "nodeType": "VariableDeclaration",
                  "scope": 20985,
                  "src": "836:21:153",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 20963,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "836:7:153",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20966,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "867:7:153",
                  "nodeType": "VariableDeclaration",
                  "scope": 20985,
                  "src": "859:15:153",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20965,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "859:7:153",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "835:40:153"
            },
            "returnParameters": {
              "id": 20971,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20970,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 20985,
                  "src": "954:7:153",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 20969,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "954:7:153",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "953:9:153"
            },
            "scope": 21003,
            "src": "795:280:153",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 21001,
              "nodeType": "Block",
              "src": "1405:68:153",
              "statements": [
                {
                  "expression": {
                    "id": 20999,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "baseExpression": {
                          "id": 20993,
                          "name": "_supportedInterfaces",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20961,
                          "src": "1415:20:153",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$",
                            "typeString": "mapping(bytes32 => mapping(address => bool))"
                          }
                        },
                        "id": 20996,
                        "indexExpression": {
                          "id": 20994,
                          "name": "interfaceHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20988,
                          "src": "1436:13:153",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1415:35:153",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 20997,
                      "indexExpression": {
                        "id": 20995,
                        "name": "account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 20990,
                        "src": "1451:7:153",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1415:44:153",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 20998,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1462:4:153",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1415:51:153",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 21000,
                  "nodeType": "ExpressionStatement",
                  "src": "1415:51:153"
                }
              ]
            },
            "documentation": {
              "id": 20986,
              "nodeType": "StructuredDocumentation",
              "src": "1081:224:153",
              "text": " @dev Declares the contract as willing to be an implementer of\n `interfaceHash` for `account`.\n See {IERC1820Registry-setInterfaceImplementer} and\n {IERC1820Registry-interfaceHash}."
            },
            "id": 21002,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_registerInterfaceForAddress",
            "nameLocation": "1319:28:153",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 20991,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 20988,
                  "mutability": "mutable",
                  "name": "interfaceHash",
                  "nameLocation": "1356:13:153",
                  "nodeType": "VariableDeclaration",
                  "scope": 21002,
                  "src": "1348:21:153",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 20987,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "1348:7:153",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 20990,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "1379:7:153",
                  "nodeType": "VariableDeclaration",
                  "scope": 21002,
                  "src": "1371:15:153",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 20989,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1371:7:153",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1347:40:153"
            },
            "returnParameters": {
              "id": 20992,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1405:0:153"
            },
            "scope": 21003,
            "src": "1310:163:153",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 21004,
        "src": "482:993:153",
        "usedErrors": []
      }
    ],
    "src": "111:1365:153"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.14+commit.80d49f37.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-06-13T13:59:54.993Z",
  "devdoc": {
    "details": "Implementation of the {IERC1820Implementer} interface. Contracts may inherit from this and call {_registerInterfaceForAddress} to declare their willingness to be implementers. {IERC1820Registry-setInterfaceImplementer} should then be called for the registration to be complete.",
    "kind": "dev",
    "methods": {
      "canImplementInterfaceForAddress(bytes32,address)": {
        "details": "See {IERC1820Implementer-canImplementInterfaceForAddress}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}